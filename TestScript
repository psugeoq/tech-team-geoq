//SQL to parse photo title from file name
SELECT substring(file_name_column, '(.+?)(\.[^.]*$|$)') FROM table_name;













//Exif Data Extract
// script to grab lat lon data from images
// processes a director of images and writes a geojson file containing the image name, lat, lon, modify data
// usage: touch photo_data.json && node parse_photos.js > photo_data.json

var fs = require('graceful-fs');
var ExifImage = require('exif').ExifImage;
var exifCount = 0;
var imgDir = path.join(__dirname, '../all_photos/');
var imgData = {
                "type" : "FeatureCollection",
                "crs": {
                  "type": "name",
                  "properties": {
                    "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
                    }
                  },
                "features" : []
              };
var errors = [];

// converts lat lon from Degrees Minutes Seconds to Decimal Degrees
function convertDMSToDD(degrees, minutes, seconds, direction) {
    var dd = degrees + minutes/60 + seconds/(60*60);

    if (direction == "S" || direction == "W") {
        dd = dd * -1;
    } // Don't do anything for N or E
    return dd;
}

function parseExifData(exifObj, name) {
  var data = {
                "type" : "Feature",
                "geometry" : {
                  "type" : "Point",
                  "coordinates" : []
                },
                "properties" : {}
              };
  var d = exifObj;  
  var imgName = name.split('/')
  data.properties.file_name = imgName[imgName.length-1];
  data.coordinates[1] = convertDMSToDD(
                            d.gps.GPSLatitude[0],
                            d.gps.GPSLatitude[1],
                            d.gps.GPSLatitude[2],
                            d.gps.GPSLatitudeRef
                            );
  data.coordinates[0] = convertDMSToDD(
                            d.gps.GPSLongitude[0],
                            d.gps.GPSLongitude[1],
                            d.gps.GPSLongitude[2],
                            d.gps.GPSLongitudeRef
                            );
  data.properties.modify_date = d.image.ModifyDate;
  imgData.features.push(data);
  exifCount ++;

  if (exifCount === 1006) {
    imgData = JSON.stringify(imgData);
    errors = JSON.stringify(errors);
    console.log(imgData);
  }
}

function readImage(img) {
  try {
      new ExifImage({ image : img }, function (error, exifData) {
          if (error)            
            errors.push({name: img, err: error.message});
          else
            parseExifData(exifData, img);
      });
  } catch (error) {      
      errors.push({name: img, err: error.message});
  }  
}

function readDataDir(path) {
  var files = fs.readdirSync(path);
  var count = 0;
  files.forEach(function(file,i){
    file = '../all_photos/' + file;
    readImage(file);
    count++
  });
}

readDataDir('../all_photos/');













//Flickr API Code




var fs = require('fs'),
      jf = require('jsonfile'),
      Flickr = require('flickrapi'),
      async = require('async'),
      joiner = require('joiner'),
      GeoJson = require('geojson');

var flickrOptions = {
      api_key: "...",
      secret: "...",
      user_id: "..."
    };

var newGeoJson;

function callFlickrAPI() {

  var count = 0;
  var data = [];

  Flickr.tokenOnly(flickrOptions, function(error, flickr) {
    for (var i=1; i<4; i++) {
      flickr.photos.search({
        user_id: flickr.options.user_id,
        page: i,
        per_page: 500,
        extras: "url_m"
      }, 

      function(err, result) {

        if (err) { console.log('error: ', err); return; }              

        var photos = result.photos.photo;

        for (var j=0; j< photos.length; j++) {
          data.push(photos[j]);
          count ++;
        }

        if (count === 1008) {
          processJson(data);
        }        

      });  
    }      
  });
}

function processJson(data) {
  var i = 0,
        o = [];
  for (i; i < data.length; i++) {
    o.push({
      title : data[i].title,
      url : data[i].url_m
    });
  }
  jf.writeFile('flickrPhotoData.json', o, function(err) {
    if (err) { console.log('error: ', err); }
  })
  joinJson(o);
}

function joinJson(data) {
  var data_a = newGeoJson,
        data_b = data,
        key_a = 'name',
        key_b = 'title',
        data_joined = joiner.geoJson(data_a, key_a, data_b, key_b, 'properties');
  writeJson(data_joined);
}

function writeJson(data) {
  var file = "flickrData.json";
  jf.writeFile(file, data, function(err) {
    if (err) { console.log('writeJson error: ', err); return;}
    console.log('data written. report: ', data.report.prose.summary);
  })
}

function processGeoJson() {
  var inputGeoJson = JSON.parse(fs.readFileSync('../data/nwb_photos.geojson'));
  var jsonOut = [];
  for (var i = 0; i<inputGeoJson.features.length; i++) {
    jsonOut.push({
      name : inputGeoJson.features[i].properties.Name,
      lat : inputGeoJson.features[i].geometry.coordinates[1],
      lon : inputGeoJson.features[i].geometry.coordinates[0]
    });
    // console.log(inputGeoJson.features[i].geometry.coordinates);
  }

  newGeoJson = GeoJson.parse(jsonOut, {Point: ['lat', 'lon'], include: ['name']});
  callFlickrAPI();
}

processGeoJson();

